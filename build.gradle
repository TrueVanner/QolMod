plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "2.0.20"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url "https://api.modrinth.com/maven" }
    maven { url 'https://maven.nucleoid.xyz' }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }

//	maven { url "https://mvnrepository.com/artifact/org.objenesis/objenesis" }

    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
        content {
            includeGroup 'io.github.ladysnake'
            includeGroup 'org.ladysnake'
            includeGroupByRegex 'dev\\.onyxstudios.*'
        }
    }

    // if only used for FzzyConfig, will be retired
//    maven {
//        name = "Modrinth"
//        url = "https://api.modrinth.com/maven"
//        content {
//            includeGroup "maven.modrinth"
//        }
//    }

    maven { url "https://jitpack.io" }

    maven {
        name = "FzzyMaven"
        url = uri("https://maven.fzzyhmstrs.me/")
    }
}

fabricApi {
    configureDataGeneration()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
    modImplementation "eu.pb4:player-data-api:[${project.player_data_api_version}]"
    modImplementation "eu.pb4:sgui:[${project.server_gui_version}]"
//    modImplementation 'com.github.0x3C50:Renderer:master-SNAPSHOT'
    modImplementation "maven.modrinth:fzzy-config:${project.fzzy_config_version}"

    implementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    implementation "org.assertj:assertj-core:3.25.1"
    implementation "net.peanuuutz.tomlkt:tomlkt:0.3.7"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'


//	modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = 21
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}


tasks.named('test', Test) {
    useJUnitPlatform()

    maxHeapSize = '1G'

    testLogging {
        events "passed"
    }
}
